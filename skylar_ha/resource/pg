#!/bin/sh
#
# Description: 
#
# Authors:      Qin Guanri
#
# Copyright:    2016 403709339@qq.com
# License:      
#
###############################################################################
# Global
WORK_DIR=$(cd `dirname $0`; cd ../; pwd)
source $WORK_DIR/conf/ha.conf

PG_VER_DEF=9.5

PG_DIR_BIN="/usr/lib/postgresql/$PG_VER_DEF/bin"
PG_DIR_DATA="/var/lib/postgresql/$PG_VER_DEF/main"
# PG_DIR_XLOG="/var/lib/postgresql/$PG_VER_DEF/xlog_archive"

PG_IMAGE_FILE=`find $WORK_DIR/dependent/ -name "skylar_pg*"`
PG_IMAGE_NAME="skylar_pg"
PG_CONTAINER="pg"

PG_USER="postgres"

PG_BAK="$data_dir/pg_backup"
pg_dir="/drbd/pg"
PG_PORT="5432/tcp"

PG_RECOVER_LOG="/var/log/pg_ha_auto_recover.log"

###############################################################################


my_ip="$master_ip"
hostname -I | grep "$slave_ip"
if [ $? -eq 0 ]; then
    my_ip="$slave_ip"
fi

prepare() {
    # check parament
    source $WORK_DIR/conf/ha.conf

    if [ ! -n "$data_dir" ] || [ "$data_dir" == "/" ] || [ ! -n "$vip_master" ] \
    || ! $WORK_DIR/include/common "check_ip_valid" $vip_master; then
        echo "ERROR. postgresql's argument invalid."
        return 1
    fi

    docker images | grep "$PG_IMAGE_NAME"
    if [ $? -ne 0 ]; then
        echo "docker load < $PG_IMAGE_FILE. Please wait minutes..."
        docker load < "$PG_IMAGE_FILE"
    fi

    return 0
}

install_pg() {
    docker ps -a | grep $PG_CONTAINER
    if [ $? -eq 0 ]; then
        docker stop $PG_CONTAINER
        docker rm $PG_CONTAINER
    fi

    #docker run -d --net=host --privileged=true --name "$PG_CONTAINER" --restart=always "$PG_IMAGE_NAME"

    #if [ $? -ne 0 ]; then
    #    echo "ERROR. docke run failed, cmd: docker run -d --net=host --privileged=true --name $PG_CONTAINER --restart=always $PG_IMAGE_NAME"
    #    return 1
    #fi

    #if ! check_pg_run; then
    #    echo "ERROR. PG is not running."
    #    return 1
    #fi
    #docker stop $PG_CONTAINER
    return 0
}

check_pg_run() {
    monitor_sql="select now();"
    test_count=1
    MAX=60
    while [ $test_count -lt $MAX ]
    do
        sleep 1
        docker exec -i $PG_CONTAINER su $PG_USER -c "$PG_DIR_BIN/psql -U $PG_USER -Atc \"${monitor_sql}\"" &>/dev/null
        if [ $? -eq 0 ]; then
            return 0
        fi
        echo "Postgresql service starting ..."
        let "test_count++"
    done
    return 1
}


# set auto execute recover when host is rebooted
auto_recover() {
    if [ ! -f /etc/rc.local ]; then
        echo "#!/bin/sh" > /etc/rc.local
    fi

    cat /etc/rc.local | grep 'skyha recover pg incr'
    if [ $? -ne 0 ]; then
        echo "$WORK_DIR/skyha recover pg incr >> $PG_RECOVER_LOG" >> /etc/rc.local
    fi

    chmod +x /etc/rc.local /etc/rc.d/rc.local

    return 0
}

recover() {
    echo "recover pg ..."
    systemctl status docker.service
    if [ $? -ne 0 ]; then
        systemctl start docker.service
        sleep 2
    fi

    backup_data

    systemctl status pacemaker.service
    if [ $? -ne 0 ]; then
        systemctl start pacemaker.service
        sleep 2
    fi

    NODENAME=$HOSTNAME
    pcs cluster unstandby $NODENAME

    return $?
}

backup_data() {
    clear
    echo "backup pg data ..."
    mkdir -p $data_dir/recover/pg/pg
    cd $data_dir/recover/pg
    
    count=`ls -lt $data_dir/recover/pg | wc -l`
    while [ "$count" -gt 5 ]
    do
        rm -f $(ls -lt $data_dir/recover/pg| tail -1| awk {'print $9'})
        count=`ls -lt $data_dir/recover/pg | wc -l`
    done

    timestamp=`date "+%Y%m%d%H%M%S"`
    filename="pg.$timestamp.tar"
    mkdir -p /drbd
    losetup $losetup_dev $data_dir/data.img
    if [ $? -eq 0 ]; then
        mount /dev/drbd1 /drbd
        cp -rf /drbd/pg $data_dir/recover/pg/pg
        cd $data_dir/recover/pg
        tar cvf $filename pg --remove-files
        gzip $data_dir/recover/pg/$filename
        rm -rf $data_dir/recover/pg/pg
        umount /dev/drbd1
    else
        peer_ip="$master_ip"
        if [ "$my_ip" == "$master_ip" ]; then
            peer_ip="$slave_ip"
        fi
        echo "backup data from peer host."
        ssh root@$peer_ip "mkdir -p $data_dir/recover/pg/pg;cp -rf /drbd/pg $data_dir/recover/pg/pg"
        ssh root@$peer_ip "cd $data_dir/recover/pg;tar cvf $filename pg --remove-files"
        ssh root@$peer_ip "gzip $data_dir/recover/pg/$filename"
        scp root@$peer_ip:$data_dir/recover/pg/"$filename.gz" $data_dir/recover/pg
    fi

    rm -rf $data_dir/recover/pg/pg
    echo "Backup pg data finished."
}

clean() {
    echo "Stop container $PG_CONTAINER ..."
    if docker ps | grep $PG_CONTAINER; then
        docker stop $PG_CONTAINER
        docker rm $PG_CONTAINER
    fi

    if [ "$pg_dir" != "" ] && [ "$pg_dir" != "/" ]; then
        backup_data
        rm -rf $pg_dir
    fi

    echo "Clean pg finished."
    return 0
}

failover() {
    pcs -f resource_cfg resource create postgres docker image=skylar_pg:latest \
        run_opts="--net=host --privileged=true -v $pg_dir:$PG_DIR_DATA" \
        name="pg" monitor_cmd="su postgres -c \"psql -U postgres -Atc \\\"select now();\\\"\"" \
        op start timeout="60s" interval="0s" on-fail="restart" \
        op monitor timeout="60s" interval="10s" on-fail="restart" \
        op stop timeout="60s" interval="0s" on-fail="standby"

    return $?

}

# todo
check_status() {
    echo "Check pg status ..."
    crm_mon -Afr -1 | grep postgres | grep Started
    if [ $? -eq 0 ]; then
        echo "OK. PG is started."
        return 0
    fi
    
    echo "ERROR. PG is not started."
    return 1
}

source $WORK_DIR/conf/ha.conf

case "$1" in
    prepare)    prepare
                exit $?;;

    install)    install_pg
                exit $?;;

    failover)   failover
                exit $?;;

    recover)    recover $2
                exit $?;;

    auto_recover)    auto_recover
                exit $?;;

    status)     check_status
                exit $?;;

    clean)      clean
                exit $?;;

    *)          $@
                exit $?;;
esac
