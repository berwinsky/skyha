#!/bin/sh
#
# Description: 
#
# Authors:      Qin Guanri
#
# Copyright:    2016 403709339@qq.com
# License:      
#
###############################################################################
# Global:
WORK_DIR=$(cd `dirname $0`; cd ../; pwd)
DRBD_RPM_TAR="yum_drbd.tar"

prepare() {
    if [ "$my_ip" == "$master_ip" ]; then
        hostnamectl set-hostname "$master_hostname"
    else
        hostnamectl set-hostname "$slave_hostname"
    fi

    mkdir -p $data_dir

    drbdadm secondary all
    drbdadm down skydata
    losetup -d $losetup_dev
    used_dev=`losetup -a | grep 'drbd.img' | awk -F ':' {'print $1'}`
    losetup -d $used_dev

    # if use loopback device, we should check the free size for creating drbd.img.
    if [ "$losetup_dev" == "" ]; then
        free_size=`df $data_dir | grep '/' | awk {'print $4'}`
        let free_size=$free_size/1000
        if [ $free_size -lt $drbd_size ]; then
            echo "ERROR. There is not enough space for drbd at $my_ip."
            return 1
        fi
    fi

    return 0
}

install() {
    echo "installing drbd, please wait a minute ..."

    $WORK_DIR/include/common check_install kmod-drbd84 drbd84-utils
    if [ $? -ne 0 ]; then
        yum install -y --disablerepo=\* --enablerepo=Drbd kmod-drbd84; sleep 2
        yum install -y --disablerepo=\* --enablerepo=Drbd drbd84-utils;
    fi 

    disk_master=""
    disk_slave=""
    ## 1. use loop back device
    if [ "$losetup_dev" != "" ]; then
        rm -f $data_dir/drbd.img
        echo "create virtual block device ... "
        dd if=/dev/zero of=$data_dir/drbd.img bs=1M count=0 seek=$drbd_size

        ls -l $data_dir/drbd.img
        if [ $? -ne 0 ]; then
            echo "ERROR. create virtual block device failed."
            return 1
        fi

        losetup_img
        disk_master=$losetup_dev
        disk_slave=$losetup_dev
    ## 2. use logical volume with device mapper
    else
        disk_master=$lv_master
        disk_slave=$lv_slave
    fi

    sed -i 's/usage-count yes/usage-count no/g' /etc/drbd.d/global_common.conf
    cat /etc/drbd.d/global_common.conf

# optimize for 10GigaEthernet
    
    echo "resource skydata {
    protocol C;
    meta-disk internal;
    device /dev/drbd1;
    net {
        verify-alg crc32c;
        csums-alg crc32c;
        max-buffers 10000;
        max-epoch-size 10000;
        sndbuf-size 0;
        rcvbuf-size 0;
        after-sb-0pri discard-zero-changes;
        after-sb-1pri discard-secondary;
        after-sb-2pri disconnect;
    }
    disk {
        al-extents 3389;
        on-io-error detach;
        c-plan-ahead 15;
        c-fill-target 2M;
        c-min-rate 50M;
        c-max-rate 720M;
        resync-rate 720M;
    }
    on $master_hostname {
        disk $disk_master;
        address $master_ip:7789;
    }
    on $slave_hostname {
        disk $disk_slave;
        address $slave_ip:7789;
    }
}" > /etc/drbd.d/skydata.res

    cat /etc/drbd.d/skydata.res

    echo "semanage permissive -a drbd_t, please wait seconds ..."
    semanage permissive -a drbd_t
    drbdadm create-md skydata
    modprobe drbd
    drbdadm up skydata
    return 0
}

set_master() {
    sleep 2
    cat /proc/drbd | grep 'cs:Connected' | grep 'ro:Secondary/Secondary'
    if [ $? -ne 0 ]; then
        echo "ERROR. drbd are not connected between master and slave."
        return 1
    fi

    drbdadm primary --force skydata

    try=0
    while [ $try -le 3600 ]
    do
        cat /proc/drbd | grep 'cs:Connected' | grep 'ds:UpToDate/UpToDate' | grep 'Primary'
        if [ $? -ne 0 ]; then
            [ "$losetup_dev" != "" ] && losetup $losetup_dev $drbd_dir/drbd.img
        else
            break
        fi
        clear
        cat /proc/drbd
        echo "Initialize DRBD's data. It may take minutes. please wait..."
        sleep 1
        let "try++"
    done

    echo "OK. Data status is uptodata."

    mkfs.xfs /dev/drbd1

    mkdir -p /drbd
    mount /dev/drbd1 /drbd
    cd /

    mkdir -p /drbd/nfsshare
    mkdir -p /drbd/nfsshare/exports
    chmod 776 /drbd/nfsshare
    chmod -R 776 /drbd/nfsshare/exports
    chown -R nfsnobody:nfsnobody /drbd/nfsshare/exports

    mkdir -p /drbd/test
    touch /drbd/test/tmp
    umount /dev/drbd1
    drbdadm secondary skydata

    cat /proc/drbd | grep 'cs:Connected'
    if [ $? -ne 0 ]; then
        echo "ERROR. drbd are not connected between master and slave."
        return 1
    fi

    echo "Set drbd master ok."
}

failover() {
    echo "config failover for drbd ..."

    echo "config drbd ..."
    pcs -f resource_cfg resource create skydata ocf:linbit:drbd drbd_resource=skydata op monitor interval=30s
    pcs -f resource_cfg resource master drbd-cluster skydata master-max=1 master-node-max=1 clone-max=2 clone-node-max=1 notify=true

    sleep 2
    echo "config skyfs ..."
    if [ "$losetup_dev" != "" ]; then
        pcs -f resource_cfg resource create skyfs Filesystem device="/dev/drbd1" directory="/drbd" fstype="xfs" options="noatime,nodiratime,noexec"
    else
        pcs -f resource_cfg resource create skyfs Filesystem device="/dev/drbd/by-res/skydata" directory="/drbd" fstype="xfs" options="noatime,nodiratime,noexec"
    fi
}

recover() {
    echo "recover drbd ..."
    systemctl status docker.service
    if [ $? -ne 0 ]; then
        systemctl start docker.service
        sleep 2
    fi

    systemctl status pacemaker.service
    if [ $? -ne 0 ]; then
        systemctl start pacemaker.service
        sleep 2
    fi

    NODENAME=$HOSTNAME
    pcs cluster unstandby $NODENAME
    sleep 1

    check_status
    if [ $? -ne 0 ]; then
        echo "WARN. DRBD status is incorrect. Try to solve split brain on slave."
        solve_split_brain
    fi
}

losetup_img() {
    try=0
    while [ $try -le 5 ]
    do
        losetup -a | grep 'drbd.img' | grep $losetup_dev
        if [ $? -ne 0 ]; then
            losetup $losetup_dev $data_dir/drbd.img
        else
            break
        fi

        sleep 1
        let "try++"
    done
}

solve_split_brain() {
    cat /proc/drbd| grep 'Primary' 
    if [ $? -eq 0 ]; then
        echo "WARN. My drbd role is primary. This command should not be execute at $my_ip."
        return 0
    fi

    ip addr | grep $vip_master
    if [ $? -eq 0 ]; then
        echo "WARN. My role is master. This command should not be execute at $my_ip."
        return 0
    fi

    pacemaker_proc=`ps -ef | grep pacemaker| grep -v grep | wc -l`
    if [ $pacemaker_proc -gt 0 ]; then
        kill -9 $(ps -ef | grep pacemaker| grep -v grep | awk {'print $2'})
    fi
    systemctl stop pacemaker.service

    [ "$losetup_dev" != "" ] && losetup_img

    drbdadm up skydata

    sleep 5
    cat /proc/drbd| grep 'Primary' | grep 'Secondary'
    if [ $? -eq 0 ]; then
        echo "OK. drbd master and slave are running."
        systemctl start pacemaker.service
        return 0
    fi

    drbdadm secondary all
    drbdadm disconnect all
    drbdadm -- --discard-my-data connect all

    systemctl start pacemaker.service

    peer_ip="$master_ip"
    if [ "$my_ip" == "$master_ip" ]; then
        peer_ip="$slave_ip"
    fi

    ssh root@$peer_ip "drbdadm primary all;drbdadm disconnect all;drbdadm connect all"

    sleep 2
    
    try=0
    while [ $try -le 3600 ]
    do
        cat /proc/drbd | grep 'cs:Sync' | grep 'Secondary' | grep 'Primary'
        if [ $? -ne 0 ]; then
            echo "ERROR. DRBD status is not connect"
            cat /proc/drbd
            return 1
        fi

        clear
        cat /proc/drbd
        echo "It may take minutes. please wait."
        sleep 1
        let "try++"
    done
}

check_status() {
    echo "check drbd status ..."
    cat /proc/drbd| grep 'Primary' | grep 'Secondary'
    if [ $? -eq 0 ]; then
        echo "OK. drbd master and slave are running."
        return 0
    fi

    cat /proc/drbd
    return 1
}

check_data_sync() {
    cat /proc/drbd | grep 'UpToDate/UpToDate' >> /dev/null
    return $?
}

clean() {
    return 0
}

uninstall() {
    yum remove -y kmod-drbd84
    yum remove -y drbd84-utils
}

source $WORK_DIR/conf/ha.conf
my_ip="$master_ip"
hostname -I | grep "$slave_ip"
if [ $? -eq 0 ]; then
    my_ip="$slave_ip"
fi

case "$1" in
    prepare)    prepare
                exit $?;;

    install)    install
                exit $?;;

    failover)   failover
                exit $?;;

    recover)    recover;;

    clean)      clean
                exit $?;;

    status)     check_status;;
    
    brain)      solve_split_brain;;

    *)          $@
                exit $?;;
esac
