#!/bin/sh
#
# Description: 
#
# Authors:      Qin Guanri
#
# Copyright:    2016 403709339@qq.com
# License:      
#
###############################################################################
# Global
WORK_DIR=$(cd `dirname $0`; cd ../; pwd)

BSTKD_IMAGE_FILE=`find $WORK_DIR/dependent/ -name "skylar_beanstalkd*"`
BSTKD_IMAGE_NAME="skylar_beanstalkd"
BSTKD_CONTAINER="beanstalkd"
BSTKD_PORT="11300"

. $WORK_DIR/conf/ha.conf


my_ip="$master_ip"
hostname -I | grep "$slave_ip"
if [ $? -eq 0 ]; then
    my_ip="$slave_ip"
fi

prepare() {
    docker images | grep $BSTKD_IMAGE_NAME
    if [ $? -ne 0 ]; then
        echo "docker load < $BSTKD_IMAGE_FILE. Please wait minutes..."
        docker load < "$BSTKD_IMAGE_FILE"
    fi
    return 0
}

install_bstkd() {
    docker ps -a | grep $BSTKD_CONTAINER
    if [ $? -eq 0 ]; then
        docker stop $BSTKD_CONTAINER
        docker rm $BSTKD_CONTAINER
    fi
    return 0
}

is_bstkd_run() {
    docker ps | grep $BSTKD_CONTAINER >>/dev/null
    if [ $? -ne 0 ]; then
        echo "Beanstalkd container is not running."
        return 1
    fi

    TRY=1
    MAX=10
    while [ $TRY -lt $MAX ]
    do
        IS_ALIVE=`ps -ef | grep -v grep | grep beanstalkd`
        if [ $? -eq 0 ]; then
            return 0
        fi
        sleep 1
        let "TRY++"
    done

    echo "Beanstalkd is not running."
    return 1
}

failover() {
    pcs -f resource_cfg resource create bstkd docker image=$BSTKD_IMAGE_NAME:latest \
        run_opts="--net=host --privileged=true" name="$BSTKD_CONTAINER" \
        monitor_cmd="ps -ef | grep beanstalkd " \
        op start timeout="60s" interval="0s" on-fail="restart" \
        op monitor timeout="60s" interval="10s" on-fail="restart" \
        op stop timeout="60s" interval="0s" on-fail="block"

    return $?
}

check_ha_status() {
    crm_mon -Afr -1 | grep bstkd | grep Started >>/dev/null
    if [ $? -eq 0 ]; then
        echo "OK. Beanstalkd is started."
        return 0
    fi

    echo "ERROR. Beanstalkd is not started."
    return 1
}

recover() {
    if ! systemctl status docker.service; then
        systemctl start docker.service
    fi

    if ! systemctl status pacemaker.service; then
        systemctl start pacemaker.service
        sleep 5
    fi

    pcs cluster unstandby
}


clean() {
    return 0
}

source $WORK_DIR/conf/ha.conf

case "$1" in
    prepare)    prepare
                exit $?;;
    install)    install_bstkd
                exit $?;;
    failover)   failover
                exit $?;;
    recover)    recover $2
                exit $?;;
    status)     check_ha_status
                exit $?;;
    clean)      clean
                exit $?;;
    *)          $@
                exit $?;;
esac
